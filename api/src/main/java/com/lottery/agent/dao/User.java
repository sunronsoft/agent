package com.lottery.agent.dao;

import com.jfinal.kit.HashKit;
import com.jfinal.kit.LogKit;
import com.jfinal.kit.StrKit;
import com.jfinal.plugin.activerecord.Db;
import com.jfinal.plugin.activerecord.Page;
import com.jfinal.plugin.activerecord.Record;
import com.lottery.agent.common.Consts;
import com.lottery.agent.entity.BaseUser;
import com.lottery.agent.util.DateUtil;

import java.util.Date;
import java.util.List;

/**
 * Generated by JFinal.
 */
@SuppressWarnings("serial")
public class User extends BaseUser<User> {
	public static final User dao = new User().dao();

    public Page<User> paginate(int pageNumber, int pageSize, String userName, Integer pause, Integer userType) {
        StringBuilder sqlExceptSelect = new StringBuilder("from t_user where 1 = 1");
        if (StrKit.notBlank(userName)) sqlExceptSelect.append(String.format(" and nick_name like '%s'", "%" + userName + "%"));
        if (pause != null) sqlExceptSelect.append(String.format(" and is_pause = %d", pause));
        if (userType != null) sqlExceptSelect.append(String.format(" and user_type = %d", userType));
        sqlExceptSelect.append(" order by id desc");

        String select = "select id, account, nick_name, user_type, parent_id, user_level, is_pause, can_bet, comission, create_time";
        return paginate(pageNumber, pageSize, select, sqlExceptSelect.toString());
    }

    public List<User> getUserList(Integer parentId, Integer masterId, String account, String nickName, String remark, Integer status, Integer userType) {
        StringBuilder sql = new StringBuilder("select ");
        sql.append("id, account, nick_name, user_type, parent_id, user_level, is_pause, can_bet, comission, create_time ");
        sql.append("from t_user where 1 = 1");

        if (parentId != null) sql.append(" and parent_id = ").append(parentId);
        if (masterId != null) sql.append(" and master_id = ").append(masterId);
        if (StrKit.notBlank(account)) sql.append(" and account like '%").append(account).append("%'");
        if (StrKit.notBlank(nickName)) sql.append(" and nick_name like '%").append(nickName).append("%'");
        if (StrKit.notBlank(remark)) sql.append(" and remark likt '%").append(remark).append("%'");
        if (status != null) sql.append(" and status = ").append(status);
        if (userType != null) sql.append(" and user_type = ").append(userType);

        return find(sql.toString());
    }

    public Record userLogin(String account, String password, int userType, String clientIp) {
        if (StrKit.isBlank(account) || StrKit.isBlank(password)) return null;

        password = HashKit.md5(password.toUpperCase());
        String sql = "select * from t_user where account = ? and password = ?";
        Record record = Db.findFirst(sql, account, password);
        if (null != record) {
            record.remove("password", "verification_code", "pause_user", "staked_user", "update_time");
            if (record.getInt("is_pause") == Consts.PAUSE_NO && record.getInt("user_type").equals(userType)) {
                // 设置用户为非正常退出
                UserLoginInfo.dao.UserAbort(record.getInt("id"));

                // 插入登录记录
                UserLoginInfo loginInfo = new UserLoginInfo();
                loginInfo.setAccount(record.getStr("account"));
                loginInfo.setUserId(record.getInt("id"));
                loginInfo.setLoginTime(new Date());
                loginInfo.setToken(StrKit.getRandomUUID());
                loginInfo.setStatus(Consts.ACCOUNT_LOGIN);
                loginInfo.setLoginIp(clientIp);
                loginInfo.save();

                record.set("token", loginInfo.getToken());
                if (StrKit.isBlank(record.getStr("currency_code"))) record.set("currency_code", "");
                if (StrKit.isBlank(record.getStr("first_name"))) record.set("first_name", "");
                if (StrKit.isBlank(record.getStr("phone"))) record.set("phone", "");
                if (StrKit.isBlank(record.getStr("remark"))) record.set("remark", "");
                if (StrKit.isBlank(record.getStr("wechat"))) record.set("wechat", "");
            }
        }
        return record;
    }

    public boolean userLogout(String token) {
        if (StrKit.isBlank(token)) return true;

        try {
            UserLoginInfo loginInfo = UserLoginInfo.dao.getLoginInfo(token);
            if (loginInfo != null && loginInfo.getStatus().equals(Consts.STATUS_YES)) {
                loginInfo.setStatus(Consts.ACCOUNT_LOGOUT);
                loginInfo.setLogoutTime(new Date());
                loginInfo.update();
            }
            return true;
        } catch (Exception e) {
            LogKit.error(e.getMessage(), e);
            return false;
        }
    }

    public Record registerUser(User user) {
        Record record = new Record();
        if (StrKit.isBlank(user.getNickName()) ||
                StrKit.isBlank(user.getPassword()) ||
                StrKit.isBlank(user.getAccount())) {
            record.set("code", Consts.RESULT_CODE_REGISTER_EMPTY);
            record.set("msg", "必填参数不能为空");
        } else if (checkAccountExist(0, user.getAccount())) {
            record.set("code", Consts.RESULT_CODE_REGISTER_SAME_ACCOUNT);
            record.set("msg", "已经存在有相同的账号");
        } else {
            try {
                String password = user.getPassword();
                if (user.getUserType() == null) user.setUserType(Consts.USER_TYPE_MEMBER);
                if (user.getUserLevel() == null) user.setUserLevel(Consts.USER_LEVEL_MEMBER);
                if (user.getIsPause() == null) user.setIsPause(Consts.PAUSE_NO);
                if (user.getCanBet() == null) user.setCanBet(Consts.STATUS_YES);
                if (user.getComission() == null) user.setComission(0);
                if (user.getMaxLevel() == null) user.setMaxLevel(0);
                if (user.getIsAnonymous() == null) user.setIsAnonymous(Consts.STATUS_NO);
                if (user.getNextTime() == null) user.setNextTime(0);
                if (user.getCreateTime() == null) user.setCreateTime(new Date());
                user.setPassword(HashKit.md5(password.toUpperCase()));
                user.save();
                record.set("code", Consts.RESULT_CODE_SUCCESS);
                record.set("msg", "新增用户成功");
            } catch (Exception e) {
                LogKit.error(e.getMessage(), e);
                record.set("code", Consts.RESULT_CODE_SYSTEM_ERROR);
                record.set("msg", "新增用户失败，系统错误");
            }
        }

        return record;
    }

    public boolean checkAccountExist(Integer userId, String account) {
        String sqlSelect = "select count(1) from t_user where account = ?";
        if (userId != null) sqlSelect += String.format(" and id <> %d", userId);
        return Db.queryLong(sqlSelect, account) > 0;
    }

    public boolean updatePassword(String token, String oldPassword, String password) {
        if (StrKit.isBlank(token) || StrKit.isBlank(password)) return false;

        UserLoginInfo loginInfo = UserLoginInfo.dao.getLoginInfo(token);
        if (loginInfo != null && loginInfo.getStatus().equals(Consts.STATUS_YES)) {
            User user = findById(loginInfo.getUserId());
            oldPassword = HashKit.md5(oldPassword.toUpperCase());

            if (user != null && oldPassword.equalsIgnoreCase(user.getPassword())) {
                password = HashKit.md5(password.toUpperCase());
                user.setPassword(password);
                user.setNextTime(DateUtil.CurrentTime() + 30 * 24 * 60 * 60);
                user.setUpdateTime(DateUtil.CurrentTime());
                return user.update();
            }
        }
        return false;
    }

    public boolean checkIsLogin(String token) {
        if (StrKit.isBlank(token)) return false;

        UserLoginInfo loginInfo = UserLoginInfo.dao.getLoginInfo(token);
        return (loginInfo != null && loginInfo.getStatus().equals(Consts.STATUS_YES));
    }

    public boolean checkUserPassword(int userId, String password) {
        User user = findById(userId);
        return user != null && password.equalsIgnoreCase(user.getPassword());
    }

    private Record getUserInfo(int userId) {
        User user = findById(userId);
        if (user != null) {
            Record record = user.toRecord();
            record.remove("password");

            UserLoginInfo loginInfo = UserLoginInfo.dao.getLoginInfo(userId);
            if (null != loginInfo) {
                record.set("token", loginInfo.getToken());
                if (StrKit.isBlank(record.getStr("currency_code"))) record.set("currency_code", "");
                if (StrKit.isBlank(record.getStr("first_name"))) record.set("first_name", "");
                if (StrKit.isBlank(record.getStr("phone"))) record.set("phone", "");
                if (StrKit.isBlank(record.getStr("remark"))) record.set("remark", "");
                if (StrKit.isBlank(record.getStr("wechat"))) record.set("wechat", "");
            }
            return record;
        }

        return null;
    }

    public Record getUserInfo(String token) {
        return getUserInfo(getUserId(token));
    }

    public int getUserId(String token) {
        int result = 0;

        if (StrKit.notBlank(token)) {
            UserLoginInfo loginInfo = UserLoginInfo.dao.getLoginInfo(token);
            if (null != loginInfo) {
                result = loginInfo.getUserId();
            }
        }

        return result;
    }

    public boolean updateUserInfo(String token, String nickName, String remark, String phone, String wechat) {
        boolean result = false;

        try {
            int userId = getUserId(token);
            if (userId != 0) {
                User user = findById(userId);
                if (user != null) {
                    user.setNickName(nickName);
                    user.setRemark(remark);
                    user.setPhone(phone);
                    user.setWechat(wechat);
                    user.setUpdateTime(DateUtil.CurrentTime());
                    result = user.update();
                }
            }
        } catch (Exception e) {
            LogKit.error(e.getMessage(), e);
        }
        return result;
    }

    public boolean updateVerificationCode(String token, String verificationCode) {
        boolean result = false;

        try {
            int userId = getUserId(token);
            if (userId != 0) {
                User user = findById(userId);
                if (null != user) {
                    user.setVerificationCode(verificationCode);
                    user.setUpdateTime(DateUtil.CurrentTime());
                    result = user.update();
                }
            }
        } catch (Exception e) {
            LogKit.error(e.getMessage(), e);
        }

        return result;
    }
}
